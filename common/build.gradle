plugins {
    // Nemerosa Versioning Plugin for the build info
    id "net.nemerosa.versioning" version "2.14.0"

    // for "api" in dependencies { }
    id "java-library"
}

dependencies {
    // Depend on the config project
    api project(":config") // api - transistively expose config dependency when implementing :common
    testImplementation project(":config").sourceSets.test.output

    // LocaleProviderTest - add snakeyaml so YamlProvider (from the :config project) can work properly
    // testRuntimeOnly = only accessible during the test job
    testRuntimeOnly "org.yaml:snakeyaml:1.27"

    // Font width data (see above)
    dddResource "solteragg:mc-font-extractor:main:mojangles_width_data@json"

    implementation "com.google.code.gson:gson:2.9.0"

    // Dependencies available in both bukkit and bungee
    compileOnly "net.md-5:bungeecord-chat:1.19-R0.1-SNAPSHOT"

    // Only included in paper?  (ShortID.java)
    compileOnly "commons-lang:commons-lang:2.6"
}

// Use --add-opens to ensure functionality of FieldUtil [java.lang.reflect.Field] (required in Java 16+)
// This will export java.lang.reflect to unnamed modules (eg. stickyapi) so that FieldUtil can still function.
// Alternative: ["--illegal-access=warn"] (same functionality as pre Java 16)
// JEP: https://openjdk.java.net/jeps/396
test.jvmArgs = ["--add-opens=java.base/java.lang.reflect=ALL-UNNAMED"]

/*
    Build Info
    ----------
    The following lines (and the processSourceTokens task) serve to embed build information
    such as versions, timestamps, commit details, as well as branch and working tree status
    into StickyAPI during build-time.

    When using StickyAPI, these values can be retrieved from their respective getters at
    com.dumbdogdiner.stickyapi.Stickyapi

    ----------

    The processSourceTokens task will also print out a list of all the tokens to be added
    to the build, for debugging reasons (eg. to ensure the info is correct)

    These is also an accompanying test at (test src) com.dumbdogdiner.stickyapi.StickyAPITest
 */

// Set the timestamp format
def dataBuildTimestamp = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"

// Import the filter
import org.apache.tools.ant.filters.ReplaceTokens

// Define the map containing the tokens we want to replace
def tokensMap = [
        BUILDINFO_VERSION: project.rootProject.version,
        BUILDINFO_DATEFORMAT: dataBuildTimestamp,
        BUILDINFO_TIMESTAMP: new java.text.SimpleDateFormat(dataBuildTimestamp).format(new Date()),
        BUILDINFO_COMMIT: versioning.info.commit,
        BUILDINFO_BRANCH: versioning.info.branch,
        BUILDINFO_ISDIRTY: versioning.info.dirty.toString()
    ]

// Create task to replace the tokens with their actual values
// NOTE: At the moment this replaces tokens *globally* (format eg. @BUILDINFO_COMMIT@ in source code)
task processSourceTokens(type: Sync) {
    from sourceSets.main.java
    into "build/processed/src/main/java"
    filter(ReplaceTokens, tokens: tokensMap)
    
    // Pretty print the build info
    println("\n----- (Common) StickyAPI Build Info -----\n")
    tokensMap.each { println "${String.format("%1\$-" + 10 + "s", it.key.replace("BUILDINFO_", "").toLowerCase())}\t${it.value}" }
}
// Use the filter task as the input for compileJava
compileJava.source = processSourceTokens.outputs


/*
    Font Width Info
    ----------
    This task serves to copy width data from the default Minecraft font into the final jar.
    This data is generated by <https://github.com/DumbDogDiner/mc-font-extractor>.
 */

// Font Width Info
task copyMCFontExtractor(type: Copy) {
    def path = project.configurations.dddResource.find {it.name.startsWith("mc-font-extractor") }
    println("common: Found font data at: " + path)
    from file(path)
    // into file("src/main/resources")
    // - Please keep this comment for future reference.
    // - This is how we would do this if we weren't also adding build info (see processSourceTokens, above comments)
    destinationDir file("src/main/resources/generated/")
    rename "mc-font-extractor-main-mojangles_width_data.json", "mojangles_width_data.json"
}

// Run the font data copier
tasks.processResources.dependsOn copyMCFontExtractor


// Common build: create a jar from the :common & :common:serverversion projects
jar {
    from sourceSets.main.output
    from project(":common:serverversion").sourceSets.main.output
}

// Common build: create uber sources from subproject sources
task commonSources(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    // Use source code from :common & :common:serverversion projects
    from sourceSets.main.allSource
    from project(":common:serverversion").sourceSets.main.allSource
}

// Common build: override the usual sources output with our one containing ServerVersion
tasks.sources.finalizedBy commonSources
